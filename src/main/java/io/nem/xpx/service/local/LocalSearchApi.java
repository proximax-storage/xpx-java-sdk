/*
 * Proximax P2P Storage REST API
 * Proximax P2P Storage REST API
 *
 * OpenAPI spec version: v0.0.1
 * Contact: proximax.storage@proximax.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.nem.xpx.service.local;

import io.nem.xpx.exceptions.ApiException;
import io.nem.xpx.model.ResourceHashMessageJsonEntity;
import io.nem.xpx.service.NemTransactionApi;
import io.nem.xpx.service.intf.SearchApi;
import io.nem.xpx.service.model.buffers.ResourceHashMessage;
import io.nem.xpx.service.pv.PrivateSearchApi;
import io.nem.xpx.utils.JsonUtils;
import org.apache.commons.codec.binary.Base64;
import org.nem.core.crypto.KeyPair;
import org.nem.core.crypto.PrivateKey;
import org.nem.core.crypto.PublicKey;
import org.nem.core.messages.SecureMessage;
import org.nem.core.model.Account;
import org.nem.core.model.Address;
import org.nem.core.model.Transaction;
import org.nem.core.model.TransferTransaction;
import org.nem.core.model.mosaic.Mosaic;
import org.nem.core.model.ncc.TransactionMetaDataPair;
import org.pmw.tinylog.Logger;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;


/**
 * The Class LocalSearchApi.
 */
public class LocalSearchApi extends PrivateSearchApi implements SearchApi {

	/** The nem transaction api. */
	private final NemTransactionApi nemTransactionApi;

	/**
	 * Instantiates a new local search api.
	 *
	 * @param nemTransactionApi the nem transaction api
	 */
	public LocalSearchApi(NemTransactionApi nemTransactionApi) {
		super(nemTransactionApi);
		this.nemTransactionApi = nemTransactionApi;
	}


	/* (non-Javadoc)
	 * @see io.nem.xpx.service.intf.SearchApi#searchTransactionWithKeywordUsingGET(java.lang.String, java.lang.String)
	 */
	@Override
	public List<ResourceHashMessageJsonEntity> searchTransactionWithKeywordUsingGET(String xPubkey, String keywords)
			throws ApiException, InterruptedException, ExecutionException {

		PublicKey pbKey = PublicKey.fromHexString(xPubkey);
		Address address = Address.fromPublicKey(pbKey);
		String publicKeyAddress = address.toString();

		List<TransactionMetaDataPair> listOfTransactionMetadataPair = nemTransactionApi
				.getAllTransactions(publicKeyAddress);

		List<ResourceHashMessageJsonEntity> encryptedMessage = new ArrayList<ResourceHashMessageJsonEntity>();
		// loop thru and search for any keyword.

		for (TransactionMetaDataPair tmp : listOfTransactionMetadataPair) {

			// we only process plain. We don't have access to the secure
			// messages at this point.
			if (tmp.getEntity() instanceof TransferTransaction) {

				TransferTransaction transferTransaction = (TransferTransaction) tmp.getEntity();
				if (checkIfTxnHaveXPXMosaic(transferTransaction)) {
					try {
						if (transferTransaction.getMessage().getType() == 1) {

							boolean found = false;
							ResourceHashMessage resourceMessage = ResourceHashMessage
									.getRootAsResourceHashMessage(ByteBuffer.wrap(
											Base64.decodeBase64(transferTransaction.getMessage().getDecodedPayload())));

							String[] commaSeparatedkeywordsSplit = keywords.split(",");
							for (String keyword : commaSeparatedkeywordsSplit) {
								if (resourceMessage.keywords().contains(keyword)) {
									found = true;
									break;
								}
							}

							if (found) {
								encryptedMessage.add(toEntity(resourceMessage));
							}

						}
					} catch (Exception e) {
						continue;
					}
				}
			}
		}
		return encryptedMessage;
	}

	
	/* (non-Javadoc)
	 * @see io.nem.xpx.service.intf.SearchApi#searchAllPublicTransactionWithMetadataKeyValuePair(java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public List<ResourceHashMessageJsonEntity>  searchTransactionWithMetadataUsingGET(String xPubkey, String key, String value)
			throws InterruptedException, ExecutionException, ApiException {
		PublicKey pbKey = PublicKey.fromHexString(xPubkey);
		Address address = Address.fromPublicKey(pbKey);
		String publicKeyAddress = address.toString();
		
		
		List<TransactionMetaDataPair> listOfTransactionMetadataPair = nemTransactionApi
				.getAllTransactions(publicKeyAddress);

		List<ResourceHashMessageJsonEntity> encryptedMessage = new ArrayList<ResourceHashMessageJsonEntity>();
		// loop thru and search for any keyword.

		for (TransactionMetaDataPair tmp : listOfTransactionMetadataPair) {
			// we only process plain. We don't have access to the secure
			// messages at this point.
			if (tmp.getEntity() instanceof TransferTransaction) {
				TransferTransaction transferTransaction = (TransferTransaction) tmp.getEntity();
				if (checkIfTxnHaveXPXMosaic(transferTransaction)) {
					try {
						if (transferTransaction.getMessage().getType() == 1) {

							boolean found = false;
							ResourceHashMessage resourceMessage = ResourceHashMessage
									.getRootAsResourceHashMessage(ByteBuffer.wrap(
											Base64.decodeBase64(transferTransaction.getMessage().getDecodedPayload())));
							if (resourceMessage.metaData() != null) {
								@SuppressWarnings("unchecked")
								Map<String, String> jsonToMap = JsonUtils.fromJson(resourceMessage.metaData(), Map.class);
								if (jsonToMap.containsKey(key) && jsonToMap.get(key).equals(value)) {
									found = true;
								}
							}

							if (found) {
								encryptedMessage.add(toEntity(resourceMessage));
							}

						}
					} catch (Exception e) {
						Logger.info("Error on decoding NEM Transaction Message." + e.getMessage());
						continue;
					}
				}
			}
		}
		return encryptedMessage;
	}

	/* (non-Javadoc)
	 * @see io.nem.xpx.service.intf.SearchApi#searchTransactionWithMetadataKeyValuePair(java.lang.String, java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public List<ResourceHashMessageJsonEntity> searchTransactionWithMetadataKeyValuePair(String xPvKey, String xPubkey,
			String key, String value) throws ApiException, InterruptedException, ExecutionException {
		return super.searchTransactionWithMetadataKeyValuePair(xPvKey, xPubkey, key, value);
	}
	
	/* (non-Javadoc)
	 * @see io.nem.xpx.service.intf.SearchApi#searchTransactionWithKeywordUsingGET(java.lang.String, java.lang.String, java.lang.String)
	 */
	@Override
	public List<ResourceHashMessageJsonEntity> searchTransactionWithKeywordUsingGET(String xPvKey, String xPubkey,
			String keywords) throws ApiException, InterruptedException, ExecutionException {
		return super.searchTransactionWithKeyword(xPvKey, xPubkey, keywords);
	}


	@Override
	public List<ResourceHashMessageJsonEntity> searchTransactionWithNameUsingGET(String xPvKey, String xPubkey,
			String name) throws ApiException, InterruptedException, ExecutionException {
		return super.searchTransactionWithKeyword(xPvKey, xPubkey, name);
	}



}
